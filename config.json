{
  "_comment": "visit scrapetube (https://scrapetube.readthedocs.io/en/latest/) and pytubefix (https://pytubefix.readthedocs.io/en/latest/index.html) for further information",
  "saveBaseDirectory": "./videos/",
  "sponsorblockDatabasePath": "./sponsorTimes.csv",
  "proxies": {
    "http": null,
    "https": null
  },
  "_comment": "proxies don't seem to work, so I disabled them",
  "urlBase": "https://www.youtube.com/watch?v=",
  "searchType": 0,
  "_comment": "0: search with channelID, channelURLs and channelUsernames, 1: search list of videoIDs and/or URLs, 2: search with YouTube search. Duplicates are ignored",
  "search": [
    {
      "channelIDs": [],
      "channelURLs": [],
      "channelUsernames": [],
      "_comment": "first 'channelIDs', then 'channelURLs' and lastly 'channelUsernames' is checked",
      "_comment": "provide channel usernames without the '@'",
      "limit": 10,
      "_comment": "0 will disable limit on scrapetube",
      "sleep": 0,
      "sortBy": null,
      "_comment": "available options are: newest, oldest, popular. Default is newest",
      "contentType": null,
      "_comment": "available options are: videos, shorts, streams. Default is videos"
    },
    {
      "videoIDs": [],
      "videoURLs": []
    },
    {
      "search": "",
      "limit": 0,
      "_comment": "0 will use all the results returned by pytubefix",
      "filters": {
        "_comment": "view pytubefix for more information: https://pytubefix.readthedocs.io/en/latest/user/search.html#using-filters",
        "uploadDate": null,
        "type": null,
        "duration": null,
        "features": [],
        "sortBy": null
      }
    }
  ],
  "filterYouTubeStreams": {
    "fps": null,
    "resolution": null,
    "mimeType": null,
    "type": "video",
    "subtype": "mp4",
    "bitrate": null,
    "videoCodec": null,
    "audioCodec": null,
    "progressive": null,
    "isDash": null,
    "onlyVideo": true,
    "audioTrackName": null
  },
  "orderBy": "resolution",
  "_comment": "order by stream attributes. I have not been able to find all the possible stream attributes pytubefix allows in the documentation. Best not change this value...",
  "_comment": "stream attributes (I found): itag, mimeType, res, fps, vcodec, progressive, type",
  "selectionFunction": "first",
  "_comment": "available options: first, last, index",
  "index": 0,
  "_comment": "uses -1 if 'index' is too high",
  "commandlineTools": {
    "_comment": "to save memory, the SponsorBlock database is filtered using some command line tools. These are GNU/Linux specific and will have to be replaced if you use a different OS",
    "_comment": "for more complex commands use '$id' and '$path' to place the videoID and 'sponsorblockDatabasePath' respectively. '$id' is only relevant for 'getVideoid'. Anything else will be interpreted literally. To escape the variables, use another '$' e.g.: '$$path'",
    "_comment": "missing variables will be appended with a leading space to the command e.g.: 'grep' -> 'grep $id $path'",
    "_comment": "appostrofies are placed around the videoID ONLY IF '$id' isn't part of the command",
    "runTimeId": "$__id__",
    "runTimeIdRegex": "[$]__id__",
    "_comment": "'$id' is replaced with 'runTimeId' so that the static '$path' variable can be preprocessed",
    "_comment": "'runTimeIdRegex' is the regex string used to search and replace 'runTimeId'",
    "_comment": "best you don't change these...",
    "getVideoid": "grep",
    "_example": "grep \"$id.*YouTube\" $path",
    "_comment": "for windows try: findstr /c:\"$id\"",
    "_comment": "grep should work for macOS",
    "getHead": "head -n 1",
    "_comment": "for windows try: findstr /b videoID",
    "_comment": "idk if there is a simpler way, but this is the easiest way I found",
    "_comment": "head should work for macOS"
  },
  "filterSponsorblockDatabase": [
    {"column": "category", "comp": "==", "value": "sponsor"}
  ],
  "_format": "value-in-sponsorblock-column 'comp' 'value'",
  "_example": [
    {"column": "category", "comp": "in", "value": ["sponsor", "selfpromo"]},
    {"column": "votes", "comp": ">", "value": 0}
  ],
  "_comment": "available options for 'comp': <, <=, ==, !=, >, >=, in",
  "_comment": "'in' is only available if 'value' is a list",
  "_comment": "available options for 'category': sponsor, selfpromo, interaction, intro, outro, preview, music_offtopic, filler. Visit https://wiki.sponsor.ajay.app/w/Types#Category for further refrence",
  "ignoreExistingDirectory": false,
  "alwaysDownload": false,
  "overwriteExistingFiles": true,
  "skipNotSponsored": true,
  "deleteAfterFinish": false,
  "crop": {
    "x": 0,
    "y": 0.98,
    "width": 1,
    "height": 1
  },
  "ffmpegQuiet": true,
  "_comment": "crop values are percentages. Width and height use the remaining video width and height after x and y have been subtracted",
  "sampleForBarDirection": 5,
  "sampleDirectionType": "equidistant",
  "_comment": "available options: equidistant, random, custom",
  "seed": 0,
  "sampleDirectionCustom": [],
  "_comment": "list of percentages e.g.: [0.1, 0.3, 0.5, 0.7, 0.9]. It will ignore the value in 'sampleForBarDirection'. If empty, it will use 'sampleType': equidistant",
  "barDirectionScanRange": [-5, 5],
  "barDirectionClassifierThresshold": 10,
  "barDirectionComparisonFunction": "std",
  "_comment": "available options: std, var. Standard deviation, variance",
  "noBarThressholdPercentage": 0.2,
  "_comment": "If a progress bar isn't always found, take percentage and skip if above 'noBarThressholdPercentage'",
  "minBarDifferencePercentage": 0.8,
  "_comment": "If there are both left-to-right and right-to-left bars found, skip if difference is under amount-of-non-empty-sampled-bars * 'minBarDifferencePercentage'",
  "skipOnGuessConflict": false,
  "sampleBarComparisonFunction": "std",
  "_comment": "available options: std, var. Standard deviation, variance",
  "barPositionsPlot": "percent",
  "_comment": "available options: percent, pixels, both",
  "saveBarPositions": false,
  "saveBarInfo": true,
  "_comment": "'saveBarInfo' will ignore 'saveBarPositions'",
  "startOfBarMaxPercent": 0.02,
  "endOfBarMinPercent": 0.98,
  "plot": {
    "generatePlot": true,
    "showPlot": false,
    "title": "Sponsor segment progress bar",
    "highlightSponsorBlockSponsorDefinition": true,
    "SponsorBlockSponsorDefinitionColour": "red",
    "highlightYouTuberSponsorDefinition": true,
    "YouTuberSponsorDefinitionColour": "green",
    "showBarPositions": true,
    "barPositionsColour": "blue",
    "savePlot": true,
    "savePlotFileExtension": "png"
  }
}
